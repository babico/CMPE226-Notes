#include <iostream>

// BINARY TREE
// A STRUCTURE WITH A UNIQUE STARTING NODE(ROOT) IN WHICH EACH NODE
// IS CAPEBLE OF HAVING AT MOST 2 CHILDREN. A UNIQUE PATH EXIST FROM
// THE ROOT TO EVERY NODE

// ROOT: THE TOP OF BASE NODE OF THE TREE
// DEAF NODE: A NODE WITH NO CHILDREN
// LEVEL OF A NODE: NUMBER OF BRANCHES ON THE PATH FROM THE ROOT TO THE NODE
// HEIGHT (DEPTH) OF A TREE: NUMBER OF NODES ON THE LONGEST PATH FROM THE ROOT TO THE LEAF
// TRAVERSALS OF BINARY TREE:
//      PREORDER: VISIT ROOT, TRAVERSE LEFT SUBTREE, TRAVERSE RIGHT SUBTREE.
//      INORDER: TRAVERSE LEFT SUBTREE, VISIT ROOT, TRAVERSE RIGHT SUBTREE.
//      POSTORDER: TRAVERSE LEFT SUBTREE, TRAVERSE RIGHT SUBTREE, VISIT ROOT.

// UZUN Ã–RNEK
// PRE: A, B, C, E, I, F, J, D, G, H, K, L
// IN: E, I, C, F, J, B, G, D, K, H, L, A
// POST: I, E, J, F, C, G, K, L, H, D, B, A

using namespace std;

/*

A---|---B---|---D---|---G
    |       |       |---H
    |       |--E
    |
    |---C---|---F---|---I
                    |---Y

*/

int main(int argc, char const *argv[])
{
    
    return 0;
}